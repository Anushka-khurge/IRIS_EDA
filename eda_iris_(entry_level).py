# -*- coding: utf-8 -*-
"""EDA IRIS (Entry level).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Y5mALakFR39jHEjXYkqzK4CP3yUebSE
"""

#importing libraries
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

from sklearn import datasets
from sklearn.model_selection import train_test_split

from sklearn.preprocessing import Normalizer
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import KFold

from collections import Counter

#importing the dataset
iris= datasets.load_iris()
# using numpy concatenate function as np.c
iris_df= pd.DataFrame(data= np.c_[iris['data'], iris['target']],
                      columns= iris['feature_names'] + ['target'])
iris_df.head()

print(iris['target'])

print(iris['data'])

iris_df.describe()

#train test split
x= iris_df.iloc[:,:-1]
y= iris_df.iloc[:, -1]

x.head()

y.head()

#splitting into training and testing
x_train, x_test, y_train, y_test= train_test_split(x,y,
                                                   test_size= 0.2,
                                                   shuffle= True,
                                                   random_state= 0)
x_train= np.asarray(x_train)
y_train= np.asarray(y_train)

x_test= np.asarray(x_test)
y_test= np.asarray(y_test)

print(f'training set size: {x_train.shape[0]} samples \ntest set size: {x_test.shape[0]} samples' )

#normalize the dataset
scaler= Normalizer().fit(x_train)   #scalar is fitted to the training set
normalized_x_train= scaler.transform(x_train)   #scaler is applied to training set
normalized_x_test= scaler.transform(x_test)

print('x train before normalisation')
print(x_train[0:5])
print('\n train after normalization')
print(normalized_x_train[0:5])

#Visualize the dataset before and after normalization
d1= {0.0: 'setosa', 1.0:'versicolor', 2.0: 'virginica'}
before= sns.pairplot(iris_df.replace({'target': d1}), hue='target')
before.fig.suptitle('pair plot of the dataset before normalization', y=1.08)

iris_df_2 = pd.DataFrame(data= np.c_[normalized_x_train, y_train],
                        columns= iris['feature_names']+ ['target'])
d1= {0.0: 'setosa', 1.0:'versicolor', 2.0: 'virginica'}
after= sns.pairplot(iris_df_2.replace({'target': d1}), hue='target')
after.fig.suptitle('pair plot of the dataset after normalization', y=1.08)

